def floyd_warshall(graph):
    num_vertices = len(graph)

    for i in range(num_vertices):
        for j in range(num_vertices):
            for k in range(num_vertices):
                if graph[i][k] + graph[k][j] < graph[i][j]:
                    graph[i][j] = graph[i][k] + graph[k][j]

# Using adjacency matrix
# Use inf for missing edges
adj_matrix = [
    [0, 3, 1, float('inf'), float('inf')],
    [float('inf'), 0, float('inf'), 5, float('inf')],
    [float('inf'), float('inf'), 0, 2, float('inf')],
    [float('inf'), float('inf'), float('inf'), 0, 4],
    [float('inf'), float('inf'), float('inf'), float('inf'), 0]
]

# Apply Floyd-Warshall algorithm
floyd_warshall(adj_matrix)

# Print the resulting adjacency matrix (now containing shortest path distances)
for row in adj_matrix:
    print(row)
