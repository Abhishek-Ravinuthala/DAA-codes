from collections import defaultdict

def topological_sort(vertices, edges):
    in_degree = [0] * vertices
    graph = defaultdict(list)

    for u, v in edges:
        graph[u].append(v)
        in_degree[v] += 1

    queue = []
    for i in range(vertices):
        if in_degree[i] == 0:
            queue.append(i)

    result = []
    while queue:
        vertex = queue.pop(0)
        result.append(vertex)

        for neighbor in graph[vertex]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)

    return result

# Example usage
vertices = 6
edges = [(5, 2), (5, 0), (4, 0), (4, 1), (2, 3), (3, 1)]

print("Topological Sorting:", topological_sort(vertices, edges))
